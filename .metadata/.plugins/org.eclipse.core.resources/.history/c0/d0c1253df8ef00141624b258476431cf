package Model;


import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;

import utils.Debug;
import Controller.StateControllerPlaying;
import kernel.Game;

public class Client extends Thread {
	private String ip;
	private int port;
	protected Socket socket;
	protected DataInputStream in;
	protected ObjectOutputStream out;
	protected String command;
	
	public Client(String ip, int port) throws UnknownHostException, IOException{
		this.setIp(ip);
		this.setPort(port);
		this.socket = new Socket(ip, port);
		this.command = "";
		this.out = new ObjectOutputStream(this.socket.getOutputStream());
		
		this.start();
	}

	public String getIp() {
		return ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public Socket getSocket() {
		return socket;
	}
	
	public void send(String message, Object o){
	
		
		try {
			
			out.writeObject(message);
			out.flush();
			if(o != null){
				out.writeObject(o);
				out.flush();
			}
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
	}
	
	public void disconnect(){
		if(getSocket() != null && getSocket().isConnected())
			send("disconnect", Game.getInstance().getPlayer());
	}
	
	public void react(Object o){
		
		
		/* ------------------------------ TRAITE LES DONNEES ATTENDUES ----------------------- */
		if(command.equals("players")){
			PlayerList p = (PlayerList) o;
			Game.getInstance().setPlayers(p);
			command = "";
		}else if(command.equals("grid")){
			Grid g = (Grid) o;
			Game.getInstance().setGrid(g);
			Debug.debugInFile("Client " + Game.getInstance().getPlayer().getPseudo() + " : " + g);
			command = "";
		}else if(command.equals("color")){
			Color c = (Color) o;
			Game.getInstance().setColorChosen(c);
			command = "";
		}
		
		/* ------------------------------ ANALYSE LA DONNEE ATTENDUE ----------------------- */
		try{
			String message = (String) o;
			if(message.equals("players")){
				command = "players";
			}else if(message.equals("start")){
				
				Game.getInstance().push(new StateControllerPlaying(Game.getViewFactory().createViewPlaying()));
				command= "";
			}else if(message.equals("grid")){
				command = "grid";
			}else if(message.equals("color")){
				command = "color";
			}
		}catch(ClassCastException e){
			// Nothing to do. Avoid errors.
		}
	}
	
	public void run(){
		try {
			ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
			while(true){
				
				this.react(in.readObject());
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	
	
	
}
