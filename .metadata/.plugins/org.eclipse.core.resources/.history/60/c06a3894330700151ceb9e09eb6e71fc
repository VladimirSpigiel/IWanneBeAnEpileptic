package Model;


import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.HashMap;
import java.util.Map;

import kernel.Game;
import BehaviorsClientSide.BehaviorClient;
import BehaviorsClientSide.OnDisconnect;
import BehaviorsClientSide.OnFull;
import BehaviorsClientSide.OnGrid;
import BehaviorsClientSide.OnPlayer;
import BehaviorsClientSide.OnPlayers;
import BehaviorsClientSide.OnTie;
import BehaviorsClientSide.OnWin;
import Controller.StateControllerDisconnected;
import Controller.StateControllerPlaying;

public class Client extends Thread {
	private String ip;
	private int port;
	protected Socket socket;
	protected ObjectOutputStream out;
	protected String command;
	private boolean serverClosed;
	
	protected Map<String, BehaviorClient> comportements;
	
	public Client(String ip, int port) throws UnknownHostException, IOException{
		this.setIp(ip);
		this.setPort(port);
		this.socket = new Socket(ip, port);
		this.command = "";
		this.out = new ObjectOutputStream(this.socket.getOutputStream());
		setServerClosed(false);		
		
		comportements = new HashMap<String, BehaviorClient>();
		comportements.put("players", new OnPlayers(this));
		comportements.put("player", new OnPlayer(this));
		comportements.put("disconnect", new OnDisconnect(this));
		comportements.put("full", new OnFull(this));
		comportements.put("tie", new OnTie(this));
		comportements.put("win", new OnWin(this));
		comportements.put("grid", new OnGrid(this));
		comportements.put("color", new OnGrid(this));
		
		this.start();
	}

	public String getIp() {
		return ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	public int getPort() {
		return port;
	}

	public boolean isServerClosed() {
		return serverClosed;
	}

	public void setServerClosed(boolean serverClosed) {
		this.serverClosed = serverClosed;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public Socket getSocket() {
		return socket;
	}
	
	public void send(String message, Object o){
	
		
		try {
			
			
			
			out.writeObject(message);
			out.flush();
			if(o != null){
				out.writeObject(o);
				out.flush();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
	public void disconnect(){
		if(getSocket() != null && getSocket().isConnected() && !isServerClosed())
			send("disconnect", Game.getInstance().getPlayer());
	}
	
	public void react(Object o){
		
		
		/* ------------------------------ TRAITE LES DONNEES ATTENDUES ----------------------- */
		if(command.equals("players")){
			PlayerList p = (PlayerList) o;
			Game.getInstance().setPlayers(p);
			command = "";
		}else if(command.equals("player")){
			Player p = (Player) o;
			Game.getInstance().getPlayers().replace(p);
			command = "";
		}else if(command.equals("grid")){
			Grid g = (Grid) o;
			Game.getInstance().setGrid(g);
			command = "";
		}else if(command.equals("color")){
			Color c = (Color) o;
			Game.getInstance().setColorChosen(c);
			command = "";
		}else if(command.equals("timer")){
			int timer = (int) o;
			
			StateControllerPlaying state;
			if( Game.getInstance().peek() instanceof StateControllerPlaying){
				state = (StateControllerPlaying) Game.getInstance().peek();
				state.timerUpdate(timer);
			}
			
			command = "";
		}else if(command.equals("win")){
			Player p = (Player) o;
			StateControllerPlaying state;
			if( Game.getInstance().peek() instanceof StateControllerPlaying){
				state = (StateControllerPlaying) Game.getInstance().peek();
				state.win(p);
				
				System.out.println(p);
			}
			
			command = "";
			
		}else if(command.equals("renamed")){
			Player p = (Player) o;
			Game.getInstance().getPlayer().setPseudo(p.getPseudo());
			command = "";
		}
		
		/* ------------------------------ ANALYSE LA DONNEE ATTENDUE ----------------------- */
		try{
			String message = (String) o;
			
			if(message.equals("players")){
				command = "players";
			}
			else if(message.equals("player")){
				command= "player";
			}else if(message.equals("start")){
				Game.getInstance().push(new StateControllerPlaying(Game.getViewFactory().createViewPlaying()));
				command= "";
			}else if(message.equals("grid")){
				
				command = "grid";
			}else if(message.equals("color")){
				StateControllerPlaying state;
				if( Game.getInstance().peek() instanceof StateControllerPlaying){
					state = (StateControllerPlaying) Game.getInstance().peek();
					state.endOfRound(false);
					System.out.println("grid");
				}
				command = "color";
			}else if(message.equals("timer")){
				command = "timer";
			}else if(message.equals("disconnect")){
				
				if(! Game.getInstance().isHostApplication())
					Game.getInstance().push(new StateControllerDisconnected(Game.getViewFactory().createViewDisconnected()));
				
				setServerClosed(true);
				
				this.join();
				
			}else if(message.equals("win")){
				command = "win";
			}else if(message.equals("tie")){
				
				StateControllerPlaying state;
				if( Game.getInstance().peek() instanceof StateControllerPlaying){
					state = (StateControllerPlaying) Game.getInstance().peek();
					state.tie();
				}
				
				command = "";
			}else if(message.equals("endRound")){
				StateControllerPlaying state;
				if( Game.getInstance().peek() instanceof StateControllerPlaying){
					state = (StateControllerPlaying) Game.getInstance().peek();
					send("acceptEndOfRound", null);
					state.endOfRound(true);
					
				}
				
				command = "";
			}else if(message.equals("full")){

				System.out.println("FULLLL");
				//this.socket.close();
				command = "";
			}else if (message.equals("renamed")){
				command = "renamed";
			}
			
		}catch(ClassCastException e){
			// Nothing to do. Avoid errors.
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void run(){
		try {
			
			
			ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
			while(true){
				//this.react(in.readObject());
				
				Object received = in.readObject();
				
				if(received instanceof String){
					BehaviorClient b = comportements.get(received);
					
					if(b.needObject())
						b.setObject(in.readObject());
					
					b.execute();
				}
			}
		} catch (IOException e) {
			
			if(!e.getMessage().equals("Software caused connection abort: recv failed"))
				e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	
	
	
}
